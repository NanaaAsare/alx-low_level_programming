!<arch>
0-isupper.c/    0           0     0     644     206       `
#include "main.h"
/**
 * _isupper - check uppercase
 * @c: variable to check
 * Return: 1 uppercase , 0 otherwise
 */

int _isupper(int c)

{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     308       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte.
 * @s: pointer to string
 * @b: constan char
 * @n: size of buffer
 * Return: pointer to sring modified.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     406       `
#include "main.h"
/**
 * _strcat - concatenates two strings.
 * @dest: string destino
 * @src: string para agregar
 * Return: pointer to dest
 */
char *_strcat(char *dest, char *src)
{
	int contador = 0, size = 0;

	for (; dest[size] != '\0'; size++)
	{}
	for (contador = 0; src[contador] != '\0'; contador++)
	{
		dest[size + contador] = src[contador];
	}
	dest[size + contador] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     438       `
#include "main.h"
/**
* _atoi - converts a string to an integer
* @s: string to convert
* Return: value of integer
*/
int _atoi(char *s)
{
	int i, j, res, signo;

	i = res = 0;
	signo = 1;
	while ((*(s + i) < '0' || *(s + i) > '9') && (*(s + i) != '\0'))
	{
		if (*(s + i) == '-')
			signo *= -1;
		i++;
	}
	j = i;
	while ((*(s + j) >= '0') && (*(s + j) <= '9'))
	{
		res = res * 10 + signo * (*(s + j) - '0');
		j++;
	}
	return (res);
}
1-isdigit.c/    0           0     0     644     196       `
#include "main.h"
/**
 * _isdigit - check digit
 * @c: digit to check
 * Return: 1 if digit, 0 otherwise
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     321       `
#include "main.h"
/**
 * _memcpy - copies memory area.
 * @dest: memory area dest
 * @src: memory area src
 * @n: number of bytes.
 * Return: pointer to memory area dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = src[i];
	}
	return (dest);
}

1-strcat.c/     0           0     0     644     460       `
#include "main.h"
/**
 * _strncat - concatenates two strings with size n
 * @dest: string destino
 * @src: string para agregar
 * @n: size
 * Return: pointer to dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int contador = 0, size = 0;

	for (; dest[size] != '\0'; size++)
	{}
	for (contador = 0; ((contador < n) && (src[contador] != '\0')); contador++)
	{
		dest[size + contador] = src[contador];
	}
	dest[size + contador] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     312       `
#include "main.h"
/**
 * _strchr - locates a character in a string.
 * @s: string
 * @c: character to find
 * Return: pointer to character to find or NULL
 */
char *_strchr(char *s, char c)
{
	for (; *s != '\0'; s++)
	{
		if (*s == c)
		{
		return (s);
		}
	}
	if (c  == '\0')
	{
		return (s);
	}
	return (0);
}
2-strcpy.c/     0           0     0     644     330       `
#include "main.h"
/**
 * _strncpy - copies a string.
 * @dest: string destino.
 * @src: string para agregar.
 * @n:size.
 * Return: pointer to dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != 0; i++)
		dest[i] = src[i];
	while (i < n)
	{
		dest[i] = 0;
		i++;
	}
	return (dest);
}
2-strlen.c/     0           0     0     644     194       `
#include "main.h"
/**
 * _strlen - length of string
 * @s: string
 * Return: lenght
 */

int _strlen(char *s)
{
	int len = 0, i;

	for (i = 0; s[i] != '\0'; i++)
	{
		len++;
	}
	return (len);
}
3-islower.c/    0           0     0     644     212       `
#include "main.h"
/**
 * _islower - check if c is lowercase
 * @c: valor for check
 * Return: 1 if c is lowercase, else 0
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     180       `
#include "main.h"
/**
 * _puts - prints a string
 * @str: string
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != 0; i++)
	{
		_putchar(str[i]);
	}
	_putchar ('\n');
}

3-strcmp.c/     0           0     0     644     256       `
#include "main.h"
/**
 * _strcmp- compares two strings.
 * @s1: string 1
 * @s2: string 2
 * Return: a.
 */
int _strcmp(char *s1, char *s2)
{
	int a, i;

	for (i = 0; s1[i] != 0; i++)
	{
		a = s1[i] - s2[i];
		if (a != 0)
			return (a);
	}
	return (a);
}

3-strspn.c/     0           0     0     644     380       `
#include "main.h"
/**
 * _strspn -  gets the length of a prefix substring.
 * @s: string
 * @accept: bytes of match
 * Return: number of bytes match
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int res = 0;
	unsigned int i, j;

	for (i = 0; accept[i] != '\0'; i++)
	{
		for (j = 0; s[j] != ' '; j++)
		{
			if (accept[i] == s[j])
				res++;
		}
	}
	return (res);
}
4-isalpha.c/    0           0     0     644     252       `
#include "main.h"
/**
 * _isalpha - check if c in alphabet
 * @c: variable to check
 * Return: 1 if true or 0 else.
 */
int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     373       `
#include "main.h"
/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: string
 * @accept: bytes of match
 * Return: pointer to firts bytes match.
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (j = 0; s[j] != '\0'; j++)
	{
		for (i = 0; accept[i] != '\0'; i++)
		{
			if (accept[i] == s[j])
				return (&s[j]);
		}
	}
	return (0);
}

5-strstr.c/     0           0     0     644     579       `
#include "main.h"
/**
 * _strstr - finds the first occurrence of the substring
 * @haystack: string
 * @needle: substring
 * Return: pointer to the beginning of the located substring or NULL
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j = 0;

	if (needle[j] == '\0')
	{
		return (&haystack[0]);
	}
	for (i = 0; haystack[i]; i++)
	{
		if (haystack[i] == needle[0])
		{
			for (j = 0; needle[j] != '\0'; j++)
			{
				if (haystack[i + j] != needle[j])
				{
					break;
				}
			}
			if (needle[j] == '\0')
			{
				return (&haystack[i]);
			}
		}
	}
	return (0);
}


6-abs.c/        0           0     0     644     176       `
#include "main.h"
/**
 * _abs - computer absolute value
 * @a: num
 * Return: result
 */

int _abs(int a)
{
	if (a >= 0)
	{
		return (a);
	}
	else
	{
		return (a * -1);
	}

}

9-strcpy.c/     0           0     0     644     335       `
#include "main.h"
/**
 * _strcpy - copies the string pointed to by src
 * @dest: string destino
 * @src: string original
 * Return: pointer to string dest.
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
		if (src[i + 1] == '\0')
			dest[i + 1] = '\0';
	}
return (dest);
}

main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

